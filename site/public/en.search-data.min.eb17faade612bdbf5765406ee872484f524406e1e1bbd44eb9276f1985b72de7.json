[{"id":0,"href":"/docs/%D0%B1%D0%BE%D1%82/","title":"Telegram бот","section":"Docs","content":"Этапы исследования и реализации:#\rИзучение предметной области: Что такое Telegram-боты. Краткий обзор популярных Python-библиотек для создания ботов: pyTelegramBotAPI, python-telegram-bot, Telethon. Получение токена для бота: Взаимодействие с BotFather в Telegram. Создание нового бота, получение и хранение токена. Настройка среды разработки: Установка среды Python. Установка pyTelegramBotAPI: pip install pyTelegramBotAPI Настройка .env файла с токеном. Разработка базового Telegram-бота: Импорт необходимых библиотек. Инициализация объекта TeleBot с токеном. Реализация обработчиков команд /start, /hello. Реализация функционала гороскопа: Получение знака зодиака и дня от пользователя через цепочки сообщений. Запрос к стороннему Horoscope API для получения гороскопа. Обработка и отправка ответа пользователю. Обработка ошибок и исключительных ситуаций: Неверный токен, ошибки API, некорректный ввод пользователя. Модификация проекта: Добавление обработки запроса погоды. Добавление обработки свободных запросов с помощью LLM GigaChat Пошаговое выполнение#\r1. Исследование предметной области#\rTelegram-бот — это приложение, работающее внутри чата Telegram, с которым взаимодействует пользователь через команды и сообщения. Основные варианты реализации на Python: Библиотека Тип синхронизации Удобство использования Поддержка сообщества Актуальность pyTelegramBotAPI Оба режима Высокая Средняя 2025-10 python-telegram-bot Оба режима Средняя Высокая 2025-10 Telethon Асинхронная Низкая Средняя 2025-10 2. Получение токена у BotFather#\rНайти в Telegram пользователя @BotFather. Запустить диалог, отправить команду /newbot. Следовать инструкциям, получить уникальный токен для нового бота. Сохранить токен в .env-файл: BOT_TOKEN=your-bot-token-hereРекомендуется использовать загрузку переменных из файла .env через библиотеку python-dotenv.\nДиаграмма взаимодействия Пользователя, BotFather и Telegram Bot Interactions\n3. Подготовка Python-среды#\rУстановить Python ≥ 3.8 и pip. Установить библиотеки: pip install pyTelegramBotAPI requests python-dotenv Создать .env для токенов/ключей и подключить его через python-dotenv. Пример содержимого:\nBOT_TOKEN=your-telegram-bot-token\rGIGACHAT_CLIENT_ID=your-client-id\rGIGACHAT_CLIENT_SECRET=your-client-secret\rGIGACHAT_AUTH_URL=https://ngw.devices.sberbank.ru:9443/api/v2/oauth\rGIGACHAT_URL=https://gigachat.devices.sberbank.ru/api/v1/chat/completions\rGIGACHAT_MODELS_URL=https://gigachat.devices.sberbank.ru/api/v1/model\r# Необязательно: модель по умолчанию\rGIGACHAT_MODEL=GigaChat-2-Max\rYANDEX_GEOCODE_API_KEY=your-yandex-geocode-key\rYANDEX_GEOCODE_URL=https://geocode-maps.yandex.ru/1.x/\rYANDEX_WEATHER_API_KEY=your-yandex-weather-key\rYANDEX_WEATHER_URL=https://api.weather.yandex.ru/v2/informers\rHOROSCOPE_API_URL=https://horoscope-app-api.vercel.app/api/v1/get-horoscope/daily 4. Разработка базового Telegram-бота#\r# bot.py import os import telebot BOT_TOKEN = os.environ.get(\u0026#39;BOT_TOKEN\u0026#39;) bot = telebot.TeleBot(BOT_TOKEN) @bot.message_handler(commands=[\u0026#39;start\u0026#39;, \u0026#39;hello\u0026#39;]) def send_welcome(message): bot.reply_to(message, \u0026#34;Howdy, how are you doing?\u0026#34;) @bot.message_handler(func=lambda msg: True) def echo_all(message): bot.reply_to(message, message.text) bot.infinity_polling()Структура проекта:#\rbot.py — основной скрипт .env — токен Структура компонентов бота\n5. Функционал гороскопа#\rПолучение данных по API#\rimport requests def get_daily_horoscope(sign: str, day: str) -\u0026gt; dict: url = \u0026#34;https://horoscope-app-api.vercel.app/api/v1/get-horoscope/daily\u0026#34; params = {\u0026#34;sign\u0026#34;: sign, \u0026#34;day\u0026#34;: day} response = requests.get(url, params) return response.json()Диалог с пользователем#\r@bot.message_handler(commands=[\u0026#39;horoscope\u0026#39;]) def sign_handler(message): text = text = (\u0026#34;Какой твой знак зодиака?\\nВыбери один: Овен, Телец, Близнецы, Рак, Лев, Дева, Весы, Скорпион, Стрелец, Козерог, Водолей, Рыбы.\u0026#34;) sent_msg = bot.send_message(message.chat.id, text, parse_mode=\u0026#34;Markdown\u0026#34;) bot.register_next_step_handler(sent_msg, day_handler) def day_handler(message): sign = message.text text = (\u0026#34;Какой день вам нужен?\\nВыберите один: СЕГОДНЯ, ЗАВТРА, ВЧЕРА, \u0026#34; \u0026#34;или дату в формате ГГГГ-ММ-ДД.\u0026#34;) sent_msg = bot.send_message(message.chat.id, text, parse_mode=\u0026#34;Markdown\u0026#34;) bot.register_next_step_handler(sent_msg, fetch_horoscope, sign.capitalize()) def fetch_horoscope(message, sign): day = message.text horoscope = get_daily_horoscope(sign, day) data = horoscope[\u0026#34;data\u0026#34;] horoscope_message = ( f\u0026#39;*Horoscope:* {data[\u0026#34;horoscope_data\u0026#34;]}\\n*Sign:* {sign}\\n*Day:* {data[\u0026#34;date\u0026#34;]}\u0026#39; ) bot.send_message(message.chat.id, \u0026#34;Вот ваш гороскоп!\u0026#34;) bot.send_message(message.chat.id, horoscope_message, parse_mode=\u0026#34;Markdown\u0026#34;)Структура взаимодействия пользователя/бота/сервера\n6. Обработка ошибок#\rПроверять корректность токена при запуске. Проверять статус ответа сервера API. Проверять ввод пользователя (существуют ли такие знаки и формат даты). Алгоритм действий бота\n7. Модификация проекта (творческий пункт)#\rИнтеграция с LLM GigaChat\nДоступ осуществляется по client-credentials (client_id/client_secret) и токену, полученному через OAuth. Все сообщения, не являющиеся командами, перенаправляются в GigaChat через GigaChatClient. Встраивание в обработчик сообщений\n@bot.message_handler(func=lambda msg: not msg.text.startswith(\u0026#39;/\u0026#39;) and not is_horoscope_context(msg) and not is_weather_context(msg)) def llm_reply(message): user_query = message.text if gigachat_client: try: resp = gigachat_client.send_chat(user_query) answer = resp[\u0026#39;choices\u0026#39;][0][\u0026#39;message\u0026#39;][\u0026#39;content\u0026#39;] except Exception as e: answer = f\u0026#34;GigaChat error: {e}\u0026#34; else: answer = \u0026#34;GigaChat не настроен. Обратитесь к администратору.\u0026#34; bot.reply_to(message, answer)Получение прогноза погоды через Яндекс API\nКоманда /weather инициирует сценарий: Запрос города Геокодирование через Яндекс.Карты API (получение координат) Получение погодного прогноза через Яндекс.Погода API Возврат результата пользователю Пример функций для интеграции def geocode_city(city: str) -\u0026gt; tuple: url = \u0026#34;https://geocode-maps.yandex.ru/1.x/\u0026#34; params = { \u0026#34;geocode\u0026#34;: city, \u0026#34;format\u0026#34;: \u0026#34;json\u0026#34;, \u0026#34;apikey\u0026#34;: \u0026#34;\u0026lt;YANDEX_GEOCODE_API_KEY\u0026gt;\u0026#34; } res = requests.get(url, params=params).json() pos = res[\u0026#39;response\u0026#39;][\u0026#39;GeoObjectCollection\u0026#39;][\u0026#39;featureMember\u0026#39;][0][\u0026#39;GeoObject\u0026#39;][\u0026#39;Point\u0026#39;][\u0026#39;pos\u0026#39;] lon, lat = pos.split() return float(lat), float(lon) def get_weather(lat: float, lon: float) -\u0026gt; str: url = \u0026#34;https://api.weather.yandex.ru/v2/informers\u0026#34; headers = {\u0026#34;X-Yandex-API-Key\u0026#34;: \u0026#34;\u0026lt;YANDEX_WEATHER_API_KEY\u0026gt;\u0026#34;} params = {\u0026#34;lat\u0026#34;: lat, \u0026#34;lon\u0026#34;: lon} resp = requests.get(url, headers=headers, params=params).json() fact = resp[\u0026#39;fact\u0026#39;] weather = f\u0026#34;{fact[\u0026#39;temp\u0026#39;]}°C, {fact[\u0026#39;condition\u0026#39;]}\u0026#34; return weatherВстраивание в обработчик команды\n@bot.message_handler(commands=[\u0026#39;weather\u0026#39;]) def weather_handler(message): sent_msg = bot.send_message(message.chat.id, \u0026#34;Укажите город для прогноза погоды:\u0026#34;) bot.register_next_step_handler(sent_msg, city_weather) def city_weather(message): city = message.text lat, lon = geocode_city(city) forecast = get_weather(lat, lon) bot.send_message(message.chat.id, f\u0026#34;Погода в {city}: {forecast}\u0026#34;) Итоговая структура репозитория:#\rpractice3/src/\r├── bot.py\r├── .env.example\r├── README.md\r├── requirement.txt\r├── gigachat_client.py\r├── diagrams/\r│ ├── use-case.png\r│ ├── component.png\r│ ├── horoscope_sequence.png\r│ ├── error_flow.png\r│ ├── class-diagram.png\r│ └── libs-table.png "},{"id":1,"href":"/docs/%D0%BE%D0%BF%D1%80%D0%BE%D0%B5%D0%BA%D1%82%D0%B5/","title":"О проекте","section":"Docs","content":"Детальное описание проекта#\rЦель проекта#\rДанный проект повышает безопасность и надежность беспилотного транспорта, используя звуковую информацию об окружающей среде. Технологии, применяемые в проекте, создают “уши” для беспилотных автомобилей, позволяя им глубже анализировать обстановку и принимать более точные решения.\nПочему это важно?#\rСовременные беспилотные автомобили используют три основных типа датчиков:\nКамеры — для распознавания объектов и дорожных знаков Лидары — для создания трехмерной модели окружающего пространства Радары — для определения расстояний и скоростей движения объектов Однако все эти системы имеют одно ключевое ограничение: они работают только в зоне прямой видимости. Звуковые сигналы, в отличие от них, способны огибать препятствия и передавать информацию о происходящем за углами, зданиями или другими машинами.\nНаучная основа проекта#\rАкустическая физика в городской среде#\rГородская инфраструктура формирует сложную акустическую среду, включающую в себя:\nМногократные отражения звука от зданий Постоянный фоновый шум — разговоры, машины, сигналы Интерференция от множества источников — одновременное звучание разных источников Доплеровский эффект от движущихся объектов "},{"id":2,"href":"/docs/%D1%80%D0%B5%D1%81%D1%83%D1%80%D1%81%D1%8B/","title":"Ресурсы","section":"Docs","content":"Полезная информация по проекту#\rНаучные публикации#\r\u0026ldquo;Журнал технической акустики\u0026rdquo; - Российский научный журнал\ntechacoustics.ru Публикации по акустике и обработке сигналов \u0026ldquo;Компьютерная лингвистика и интеллектуальные технологии\u0026rdquo;\ndialog-21.ru Материалы по обработке сигналов и речи CyberLeninka - Научная электронная библиотека\ncyberleninka.ru Открытый доступ к российским научным публикациям Книги и учебники#\r\u0026ldquo;Цифровая обработка сигналов\u0026rdquo; - Сергиенко А.Б.\n\u0026ldquo;Автономные транспортные системы\u0026rdquo; - Якимов М.Р.\n\u0026ldquo;Алгоритмы и методы распознавания образов\u0026rdquo; - Журавлев Ю.И.\nПрограммное обеспечение#\rРепозитории, связанные с локализацией источника звука с использованием методологии AOA (Angle Of Arrival)\nGitHub - метод AOA Репозитории, связанные с локализацией источника звука с использованием методологии TDOA (Time Difference of Arrival)\nGitHub - метод TDOA Библиотека для работы с Outdoor звуком\npypi.org - библиотека "},{"id":3,"href":"/docs/%D1%83%D1%87%D0%B0%D1%81%D1%82%D0%BD%D0%B8%D0%BA%D0%B8/","title":"Участники","section":"Docs","content":"Участники проекта#\rУчастник Отдел разработки проекта Юрий Фурлетов Куратор Орлов Даниил Локализация Александр Диденко Локализация Арсений Захарычев Локализация Артем Исаев Локализация Роман Макаров Локализация Амрах Садыков Локализация Вадим Узун Локализация Максим Бартенов ML Михаил Белеванцев ML Дмитрий Голик ML Дарья Позднякова ML Тимофей Поляков ML Владислав Репьев ML Иван Сустатов ML Александр Ярмолич ML Владислав Фирсов Датасет Александр Чурилин Датасет Артем Мкртчян Установка "},{"id":4,"href":"/docs/%D0%B6%D1%83%D1%80%D0%BD%D0%B0%D0%BB/","title":"Журнал","section":"Docs","content":"Журнал#\rХод работ#\rПоиск и анализ литературы#\rВыполнен детальный обзор современных методов акустического восприятия для автономных систем управления на базе анализа научных публикаций и учебных книг.\nИсследованные направления:\nТехнологии шумоподавления в условиях городской среды Способы пространственной локализации аудиосигналов Результаты:\nПроанализированы научные публикации и учебные книги, имеющие непосредственное отношение к тематике проекта Определён набор базовых алгоритмов для последующего сравнения эффективности Определены ключевые технические задачи: городской шум, обработка в реальном времени Сбор датасета городских звуков#\rНачат процесс сбора и аннотирования датасета для обучения моделей распознавания звуков.\nСтруктура датасета:\nЭкстренные сигналы: сирены скорой помощи, полиции, МЧС Звуки транспортных средств: гудки, скрип тормозов, работа двигателей Предупреждающие сигналы: крики, сигналы строительной техники Фоновые шумы: городской трафик, погодные явления Текущий прогресс:\nСобрано 6 часов 30 минут суммарного времени аудиозаписей городской среды В проекте используется не только найденный в интернете датасет, а в том числе записанный участниками проекта Методы разметки аудиособытий:\nОпределение временного диапазона появления аудиосигнала Классификация типа звукового события Оценка уровня громкости и направления источника Анализ присутствия шумов и характеристик качества записи Разработка и реализация базовой методологии анализа#\rКлючевой этап проекта - переход от теоретической модели к практической реализации. Реализована базовая методология анализа звуковых сигналов в идеальных условиях.\nВыполненные работы:\nТеоретическое моделирование \u0026ldquo;на бумаге\u0026rdquo;:\nРазработана математическая модель для обнаружения одиночных звуковых событий Определены параметры анализа для идеальных условий (одиночный хлопок в тишине) Проработаны алгоритмы выделения полезного сигнала на фоне шума Практическая реализация:\nРазработка программной части осуществлялась с помощью языка Python Файл с готовым решением на языке Python "}]